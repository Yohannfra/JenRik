#!/usr/bin/env python3

import sys
import toml
import os
import subprocess
from termcolor import colored
import shlex
import time


def print_help(binary_name):
    """ Print a basic help showing how to use Jenerik """
    print(f"USAGE : {binary_name} file.jrk | init path_to_binary")
    print("\tinit\tcreate a basic test file for the given binary")


def open_file(fp):
    """ Open the toml file and parse it """
    if not fp.endswith(".toml"):
        sys.exit("You must provide valid toml file")
    try:
        f = open(fp, 'r')
        c = f.read()
    except:
        sys.exit(f"Could not open file {fp}")
    content = toml.loads(c)  # Parse the toml file
    f.close()
    return content


def init_file(fp):
    """ Create a default test file """
    test_file_name = 'test_' + fp + '.toml'

    default_file_content = [
        f"binary_path = \"{fp}\"\n\n",
        "# A sample test\n",
        "[test1]\n",
        "args = [\"-h\"]\n",
        "status = 0\n",
        "stdout=\"\"\n",
        "stderr=\"\"\n",
    ]

    if os.path.exists(test_file_name):
        sys.exit(f"{test_file_name} already exists, can't init the file")
    try:
        f = open(test_file_name, 'w')
    except:
        sys.exit(f"Could not create file {test_file_name}")
    for line in default_file_content:
        f.write(line)
    f.close()
    print(f"Initialized {test_file_name} with success")


def check_binary_validity(binary_path, relative_path):
    """ Check if the binary path is a valid executable file """
    if os.path.exists(relative_path + binary_path):
        if not os.access(relative_path + binary_path, os.X_OK):
            sys.exit(f"{binary_path} : is not executable")
        elif os.path.isdir(relative_path + binary_path):
            sys.exit(f"{binary_path} : is a directory")
    else:
        sys.exit(f"{binary_path} : file not found")


def check_tests_validity(test_name, values):
    """ Check if all the fieds of the test are known and are valids."""
    if type(values) != dict:
        sys.exit(f"Invalid test : '{test_name} {values}'")
    known_tests_keys = ['args', 'status', 'stdout', 'stderr', 'pre', 'post',
                        'stdout_file', 'stderr_file', 'pipe_stdout',
                        'pipe_stderr', 'timeout', 'should_fail', 'stdin']
    has_args = 'args' in values.keys()
    has_status = 'status' in values.keys()

    if has_args == False or has_status == False:
        sys.exit(test_name + ": Missing field : " + ("'args'" * (not has_args)) +
                 (" and " * (not has_args and not has_status)) +
                 ("'status'" * (not has_status)))
    for key in values:
        if key not in known_tests_keys:
            sys.exit(f"{test_name}: Unknown key : {key}")

    if 'stderr' in values.keys() and 'stderr_file' in values.keys():
        sys.exit(
            f"{test_name}: Duplicated stderr keys, you can\'t use both 'stderr' and 'stderr_file' for a test")
    if 'stdout' in values.keys() and 'stdout_file' in values.keys():
        sys.exit(
            f"{test_name}: Duplicated stdout keys, you can\'t use both 'stdout' and 'stdout_file' for a test")
    if 'timeout' in values.keys() and type(values['timeout']) != float and type(values['timeout']) != int:
        sys.exit(f"{test_name}: timeout value must be a float or an int")
    if 'should_fail' in values.keys() and values['should_fail'] != 1 and values['should_fail'] != 0:
        sys.exit(f"{test_name}: should_fail value must be a boolean")
    if 'stdin' in values.keys() and type(values['stdin']) != list:
        sys.exit(f"{test_name}: stdin value must be an array")


def check_test_file_validity(content, fp, relative_path):
    """ Check if the toml test file is valid """
    binary_path = ""
    test_suite = {}

    for key in content.keys():
        if key == "binary_path":
            binary_path = content[key]
            check_binary_validity(binary_path, relative_path)
        else:
            check_tests_validity(key, content[key])
            # If we arrived here then the test is valid
            test_suite[key] = content[key]

    if binary_path == "":
        sys.exit(f"Could not find binary_path key in {fp}")

    return (relative_path + binary_path), test_suite


class Tester:
    """ The class containing everything to run the tests """

    def __init__(self, binary_path, test_suite, relative_path):
        self.test_suite = test_suite
        self.binary_path = binary_path
        self.count_tests = 0
        self.test_should_fail = -1
        self.count_failed_tests = 0
        self.relative_path = relative_path

    def print_test_sucess(self):
        """ print a message if test success """
        if self.test_should_fail == 0:
            return self.print_test_failed("Test should have failed")
        print(colored('OK', 'green'))

    def print_test_failed(self, e):
        """ print a message if test fails """
        if self.test_should_fail == 1:
            return self.print_test_sucess()
        self.count_failed_tests += 1
        print(colored('KO', 'red'), end=" : ")
        print(e)

    def comp_output_file(self, output_file, output, output_name):
        """ compare an output with a given file """
        output_file = (self.relative_path + output_file).replace('/./', '/')
        if os.path.exists(output_file):
            if not os.access(output_file, os.R_OK):
                sys.exit(f"{output_file} : is not readable")
        else:
            sys.exit(f"{output_file} : file not found")
        try:
            f = open(output_file, 'r')
            fc = f.read()
            f.close()
        except:
            sys.exit(f"{output_file} : could not open and read file")
        if output != fc:
            self.print_test_failed(f"Invalid {output_name}, "
                                   f"expected '{fc}' but got '{output}'")
            return True
        return False


    def apply_pipe(self, output, pipe):
        """ apply a pipe command on a given output """
        if pipe == "":
            return output
        output = os.popen('echo ' + shlex.quote(output.rstrip("\n")) + ' ' + pipe).read()
        return output


    def check_test_results(self, values, stdout, stderr, status):
        """ check the tests results """
        if 'pipe_stdout' in values:
            stdout = self.apply_pipe(stdout, values['pipe_stdout'])
        if 'pipe_stderr' in values:
            stderr = self.apply_pipe(stderr, values['pipe_stderr'])

        if values['status'] != status:
            self.print_test_failed("Invalid exit status, "
                                   f"expected {values['status']} but got {status}")
        elif 'stdout' in values and values['stdout'] != "" \
                and values['stdout'] != stdout:
            self.print_test_failed("Invalid stdout, "
                                   f"expected {values['stdout'].encode('utf-8')} but got {stdout.encode('utf-8')}")
        elif 'stderr' in values and values['stderr'] != "" \
                and values['stderr'] != stderr:
            self.print_test_failed("Invalid stderr, "
                                   f"expected {values['stderr'].encode('utf-8')} but got {stderr.encode('utf-8')}")
        elif 'stdout_file' in values and self.comp_output_file(values['stdout_file'], stdout, 'stdout'):
            pass
        elif 'stderr_file' in values and self.comp_output_file(values['stderr_file'], stderr, 'stderr'):
            pass
        else:
            self.print_test_sucess()

    def run_pre_post_command(self, command):
        """ run pre and post commands """
        if type(command) == str and command != "":
            os.system(command)
        elif type(command) == list and command != []:
            for c in command:
                if c != "" and type(command) == str:
                    os.system(c)

    def run_test(self, values):
        """ run the test in a subprocess """
        self.count_tests += 1

        if 'pre' in values:
            self.run_pre_post_command(values['pre'])
        test_args = [self.binary_path] + values['args']
        process = subprocess.Popen(test_args, stdin=subprocess.PIPE,
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        try:
            if 'stdin' in values :
                for v in values['stdin']:
                    process.stdin.write((v + "\n").encode('utf-8'))
            stdout, stderr = process.communicate(timeout=values.get('timeout', None))
            if 'stdin' in values :
                process.stdin.close()
        except subprocess.TimeoutExpired:
            process.kill()
            self.print_test_failed(f"Test timed out : terminated after {values['timeout']}s")
        else:
            self.check_test_results(values, stdout.decode('utf-8'),
                                    stderr.decode('utf-8'), process.returncode)
        if 'post' in values:
            self.run_pre_post_command(values['post'])

    def print_summary(self):
        """ print a summary of the tests results """
        count_success = self.count_tests - self.count_failed_tests
        print(f"\nSummary {self.binary_path}: {self.count_tests} tests ran")
        print(f"{count_success} : {colored('OK', 'green')}")
        print(f"{self.count_failed_tests} : {colored('KO', 'red')}")

    def launch(self):
        """ launch the tests on the test suite """
        for test in self.test_suite:
            self.test_should_fail = -1
            if 'should_fail' in self.test_suite[test].keys():
                self.test_should_fail = self.test_suite[test]['should_fail']
            print(f"{test} : ", end='')
            self.run_test(self.test_suite[test])
        self.print_summary()
        return self.count_failed_tests


def main(argc, argv):
    if argc == 1 or argc > 3 or argc == 3 and argv[1] != 'init':
        print_help(argv[0])
        exit(1)
    if argc == 3:
        init_file(argv[2])
    elif argc == 2:
        content = open_file(argv[1])
        relative_path = "/".join(argv[1].split('/')[0:-1]) + '/'
        if '/' == relative_path and '/' not in argv[1]: # dirty but works
            relative_path = './'
        binary_path, test_suite = check_test_file_validity(content, argv[1], relative_path)
        binary_path = binary_path.replace('././', './')
        tester = Tester(binary_path, test_suite, relative_path)
        exit(tester.launch())


if __name__ == '__main__':
    main(len(sys.argv), sys.argv)
